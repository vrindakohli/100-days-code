#include<iostream>
#include<bits/stdc++.h>
using namespace std;

class node
{
public:
    int data;
    node* next;

    node(int val){
    data=val;
    next=NULL;
    }
};

//insert at tail
void insertAtTail(node* &head, int val)
{
    node* n= new node(val);
    if(head==NULL){
        head=n;
    }
    else{
        node *temp= head;
        while(temp->next!=NULL){
            temp=temp->next;
        }
        temp->next=n;
    }
}


void display(node *head)
{
    node*temp=head;
    while(temp!=NULL){
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"NULL"<<endl;
}
void removeCycle(node* &head)
{
    node*fast=head;
    node*slow=head;
    do{
        slow=slow->next;
        fast=fast->next->next;
    }while(slow!=fast);
    fast=head;
    while(slow->next!=fast->next){
        slow=slow->next;
        fast=fast->next;
    }

    slow->next=NULL;
}


void makeCycle(node *&head, int pos)
{
    node*temp=head;
    node *startnode;
    int c=1;
    while(temp->next!=NULL){
        if(c==pos){
            startnode=temp;
        }
        temp=temp->next;
        c++;
    }
    temp->next=startnode;
}

bool detectCycle(node*&head)
{
    node *fast=head;
    node *slow=head;
    while(fast!=NULL&&fast->next!=NULL){
        slow=slow->next;
        fast=fast->next->next;
        if(fast==slow){
            return true;
        }
    }
    return false;
}


int main()
{
    node* head=NULL;
    insertAtTail(head, 1);
    insertAtTail(head, 3);
    insertAtTail(head, 5);
    insertAtTail(head, 6);
    insertAtTail(head, 7);
    insertAtTail(head, 9);
    display(head);
    makeCycle(head,3);
    removeCycle(head);
    if(detectCycle(head)){
        cout<<"cycle exists";
    }
    else{
        cout<<"cycle does not exist";
    }
    return 0;
}

